Index: src/TheClock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionListener;\nimport java.time.Duration;\nimport java.time.LocalTime;\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class TheClock extends JFrame {\n    private JTextField textField1;\n    private JPanel panel;\n    private JButton resetButton;\n    private JButton addButton;\n    private boolean color = true;\n    private boolean toRepeat = true;\n    private ArrayList<LocalTime> timeTable = new ArrayList<>(Arrays.asList(\n            LocalTime.of(7, 45),  // 7:45\n            LocalTime.of(8, 40),  // 8:40\n            LocalTime.of(9, 30),  // 9:30\n            LocalTime.of(10, 35), // 10:35\n            LocalTime.of(11, 30), // 11:30\n            LocalTime.of(12, 25), // 12:25\n            LocalTime.of(13, 20), // 13:20\n            LocalTime.of(14, 10), // 14:10\n            LocalTime.of(15, 0),\n            LocalTime.of(22,25)\n    ));\n    private LocalTime displayedTime;\n\n    //private int repeatFreq = 1;\n\n    /*\n* 1.More imaginatime\n* 2.Makes you do better backflips\n* No firearm!!\n* 4.you can draw\n* friend :)\n*\n*\n* he kicked her in the head with big soccer shoes :(\n* */\n\n\n\n\n\n    public TheClock() {\n\n        displayedTime = getClosestTime();\n        setContentPane(panel);\n        setVisible(true);\n        setTitle(\"TIME\");\n        setSize(875, 500);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        textField1.setEditable(false);\n        textField1.setPreferredSize(new Dimension(500, 100)); // Width: 300px, Height: 50px\n        textField1.setHorizontalAlignment(SwingConstants.CENTER);\n        textField1.setFont(new Font(\"Arial\", Font.PLAIN, 75));\n        resetButton.addActionListener(e -> {\n            displayedTime = getClosestTime();\n            panel.setBackground(Color.WHITE);\n            textField1.setBackground(Color.WHITE);\n            textField1.setForeground(Color.WHITE);\n\n        });\n        addButton.addActionListener(e -> showTimeInput());\n    }\n\n    public LocalTime getClosestTime(){\n\n\n        LocalTime currTime = LocalTime.now();\n        for(LocalTime time : timeTable){\n            if(time.isAfter(currTime)){\n                return time;\n            }\n        }\n        return null;\n    }\n    public void displayTime(){\n\n\n\n        if (displayedTime != null) {\n            Duration duration = Duration.between(LocalTime.now(),displayedTime);\n            //long hours = duration.toHours();\n            long minutes = duration.toMinutes() % 60; // Remainder of minutes after hours\n            long seconds = duration.getSeconds() % 60; // Remainder of seconds after minutes\n\n\n            if(seconds >= 0) {\n                textField1.setText(convertTime(minutes) + \":\" + convertTime(seconds));\n            }\n            else {\n                textField1.setText(\"GO GO GO\");\n                Blik(textField1, new Color(238, 130, 238), Color.black);\n\n                //repeatFreq = 500;\n            }\n        }\n        else {\n\n            textField1.setText(\"GO TO SLEEP WEIRDO\");\n\n        }\n    }\n    public String convertTime(long time){\n        if(time <10){\n            return \"0\"+time;\n        }\n        else return String.valueOf(time);\n\n    }\n    public void Blik(JTextField field, Color color1, Color color2){\n\n            if (this.color) {\n                panel.setBackground(color1);\n                field.setBackground(color1);\n                field.setForeground(color2);\n            } else {\n                panel.setBackground(color2);\n                field.setBackground(color2);\n                field.setForeground(color1);\n            }\n            this.color = !this.color;\n\n    }\n    public void showTimeInput(){\n\n        // Create a new JDialog (popup window)\n        JDialog dialog = new JDialog((Frame) null, \"Enter Time\", true);\n        dialog.setSize(300, 150);\n        dialog.setLayout(new FlowLayout());\n\n        // Create a label and text field for time input\n        JLabel label = new JLabel(\"Enter Time (HH:MM):\");\n        JTextField timeField = new JTextField(10);\n\n        // Create a submit button\n        JButton submitButton = new JButton(\"Submit\");\n\n        // Add an action listener to handle the input when the submit button is clicked\n        submitButton.addActionListener(e -> {\n                String enteredTime = timeField.getText();\n                // Validate or process the entered time here\n                //return enteredTime\n                if(isValidTime(enteredTime)){\n                    timeTable.add(LocalTime.of(Integer.parseInt(enteredTime.substring(0,1)),Integer.parseInt(enteredTime.substring(4,5))));\n                }\n                else System.out.println(\"Bad Time \" + enteredTime);\n\n\n                // Close the popup window\n                dialog.dispose();\n\n        });\n\n        // Add components to the dialog\n        dialog.add(label);\n        dialog.add(timeField);\n        dialog.add(submitButton);\n\n        // Show the dialog in the center of the screen\n        dialog.setLocationRelativeTo(null);\n        dialog.setVisible(true);\n    }\n    public boolean isValidTime(String time){\n        // Check if the input has exactly 5 characters (HH:MM)\n        if (time == null || time.length() != 5) {\n            return false;\n        }\n\n        // Check if the third character is a colon ':'\n        if (time.charAt(2) != ':') {\n            return false;\n        }\n\n        try {\n            // Parse the hours and minutes\n            int hours = Integer.parseInt(time.substring(0, 2));\n            int minutes = Integer.parseInt(time.substring(3, 5));\n\n            // Validate the range for hours (0-23) and minutes (0-59)\n            if (hours < 0 || hours > 23  || minutes < 0 || minutes > 59) {\n                return false;\n            }\n\n        } catch (NumberFormatException e) {\n            // Catch any parsing errors (non-numeric values in hours or minutes)\n            return false;\n        }\n\n        // If all checks pass, the input is valid\n        return true;\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/TheClock.java b/src/TheClock.java
--- a/src/TheClock.java	(revision a70ef2273eade87afc92c0ec153375cf8f7c7fcd)
+++ b/src/TheClock.java	(date 1729502779699)
@@ -84,8 +84,8 @@
         if (displayedTime != null) {
             Duration duration = Duration.between(LocalTime.now(),displayedTime);
             //long hours = duration.toHours();
-            long minutes = duration.toMinutes() % 60; // Remainder of minutes after hours
-            long seconds = duration.getSeconds() % 60; // Remainder of seconds after minutes
+            long minutes = duration.toMinutes() % 60;
+            long seconds = duration.getSeconds() % 60;
 
 
             if(seconds >= 0) {
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"openjdk-21\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/out\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision a70ef2273eade87afc92c0ec153375cf8f7c7fcd)
+++ b/.idea/misc.xml	(date 1729752464721)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_21" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_23" default="true" project-jdk-name="openjdk-21" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
